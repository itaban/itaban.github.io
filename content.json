[{"title":"vue-iview-app项目实践","date":"2018-03-23T02:54:19.000Z","path":"2018/03/23/vue-iview-app/","text":"一、初始化vue项目1、 全局安装 vue-cli1npm install --global vue-cli 2、创建一个基于 webpack 模板的新项目1vue init webpack treasury_itaban 3、安装依赖12cd treasury_itabannpm install 4、运行项目1npm run dev 5、创建的项目目录结构如下所示 二、引入iview打开src/main.js文件1234567891011121314// The Vue build version to load with the `import` command// (runtime-only or standalone) has been set in webpack.base.conf with an alias.import Vue from 'vue'import App from './App'import router from './router'Vue.config.productionTip = false/* eslint-disable no-new */new Vue(&#123; el: '#app', router, components: &#123; App &#125;, template: '&lt;App/&gt;'&#125;) 修改src/main.js文件，添加123import iView from 'iview'import 'iview/dist/styles/iview.css' // 使用 CSSVue.use(iView) 修改结果为：12345678910111213141516171819// The Vue build version to load with the `import` command// (runtime-only or standalone) has been set in webpack.base.conf with an alias.import Vue from 'vue'import App from './App'import router from './router'import iView from 'iview'import 'iview/dist/styles/iview.css'Vue.config.productionTip = falseVue.use(iView)/* eslint-disable no-new */new Vue(&#123; el: '#app', router, components: &#123; App &#125;, template: '&lt;App/&gt;'&#125;) iview 安装1npm install --save iview 三、使用iview组件创建 src/components/FirstIview.vue* 注意：代码缩进有严格要求（官方代码直接贴过来不好使，修改代码缩进）12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849&lt;template&gt; &lt;Form ref=\"formInline\" :model=\"formInline\" :rules=\"ruleInline\" inline&gt; &lt;FormItem prop=\"user\"&gt; &lt;Input type=\"text\" v-model=\"formInline.user\" placeholder=\"Username\"&gt; &lt;Icon type=\"ios-person-outline\" slot=\"prepend\"&gt;&lt;/Icon&gt; &lt;/Input&gt; &lt;/FormItem&gt; &lt;FormItem prop=\"password\"&gt; &lt;Input type=\"password\" v-model=\"formInline.password\" placeholder=\"Password\"&gt; &lt;Icon type=\"ios-locked-outline\" slot=\"prepend\"&gt;&lt;/Icon&gt; &lt;/Input&gt; &lt;/FormItem&gt; &lt;FormItem&gt; &lt;Button type=\"primary\" @click=\"handleSubmit('formInline')\"&gt;Signin&lt;/Button&gt; &lt;/FormItem&gt; &lt;/Form&gt;&lt;/template&gt;&lt;script&gt;export default &#123; data () &#123; return &#123; formInline: &#123; user: '', password: '' &#125;, ruleInline: &#123; user: [ &#123; required: true, message: 'Please fill in the user name', trigger: 'blur' &#125; ], password: [ &#123; required: true, message: 'Please fill in the password.', trigger: 'blur' &#125;, &#123; type: 'string', min: 6, message: 'The password length cannot be less than 6 bits', trigger: 'blur' &#125; ] &#125; &#125; &#125;, methods: &#123; handleSubmit (name) &#123; this.$refs[name].validate((valid) =&gt; &#123; if (valid) &#123; this.$Message.success('Success!') &#125; else &#123; this.$Message.error('Fail!') &#125; &#125;) &#125; &#125;&#125;&lt;/script&gt; 修改 src/App.vue:1234567891011121314151617181920212223242526&lt;template&gt; &lt;div id=\"app\"&gt; &lt;FirstIview&gt;&lt;/FirstIview&gt; &lt;/div&gt;&lt;/template&gt;&lt;script&gt;import FirstIview from './components/FirstIview'export default &#123; name: 'App', components: &#123; 'FirstIview': FirstIview &#125;&#125;&lt;/script&gt;&lt;style&gt;#app &#123; font-family: 'Avenir', Helvetica, Arial, sans-serif; -webkit-font-smoothing: antialiased; -moz-osx-font-smoothing: grayscale; text-align: center; color: #2c3e50; margin-top: 60px;&#125;&lt;/style&gt; 运行1npm run dev 浏览器打开localhost:8080 打包1npm run build 执行完毕后，会在项目目录下生成dist目录 四、使用HBuilder真机测试1、将安卓手链接到电脑，打开开发者模式2、运行-&gt;真机运行-&gt;选择链接的手机3、等待一会即可打开手机查看运行效果了4、按照之前的步骤，真机上运行是一个空白页，需要修改config/index.js文件夹下的assetsPublicPath配置，将”/“修改为”.”（这步很关键）然后再重新执行1npm run build 五、使用HBuilder打包APP1、文件-&gt;新建-&gt;移动app点击确定，生成项目目录结构如下所示： 2、保留unpackage、manifest.json这两个文件，其它删除3、将上一步打包的文件放在该文件目录下 4、云打包 发行-&gt;云打包-打原生安装包","tags":[{"name":"前端","slug":"前端","permalink":"itaban.github.io/tags/前端/"}]},{"title":"create-spring-cloud-app-by-maven","date":"2017-09-03T13:51:37.000Z","path":"2017/09/03/create-spring-cloud-app-by-maven/","text":"创建SBShoop项目1、进入命令行，输入一下命令：1mvn archetype:generate -DgroupId=com.itaban.app -DartifactId=SBCShoop -DarchetypeArtifactId=maven-archetype-quickstart -DinteracticeMode=false 2、将src文件夹删除，然后修改pom.xml文件，将jar修改为pom，pom表示它是一个被继承的模块，修改后的内容如下：12345678910111213141516171819202122232425&lt;?xml version=\"1.0\" encoding=\"UTF-8\"?&gt;&lt;project xmlns=\"http://maven.apache.org/POM/4.0.0\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd\"&gt; &lt;modelVersion&gt;4.0.0&lt;/modelVersion&gt; &lt;groupId&gt;com.itaban.app&lt;/groupId&gt; &lt;artifactId&gt;SBCShoop&lt;/artifactId&gt; &lt;version&gt;1.0-SNAPSHOT&lt;/version&gt; &lt;packaging&gt;pom&lt;/packaging&gt; &lt;name&gt;SBCShoop&lt;/name&gt; &lt;url&gt;http://maven.apache.org&lt;/url&gt; &lt;properties&gt; &lt;project.build.sourceEncoding&gt;UTF-8&lt;/project.build.sourceEncoding&gt; &lt;/properties&gt; &lt;dependencies&gt; &lt;dependency&gt; &lt;groupId&gt;junit&lt;/groupId&gt; &lt;artifactId&gt;junit&lt;/artifactId&gt; &lt;version&gt;3.8.1&lt;/version&gt; &lt;scope&gt;test&lt;/scope&gt; &lt;/dependency&gt; &lt;/dependencies&gt; &lt;modules&gt; &lt;module&gt;SBCShop-Eureka-Server&lt;/module&gt; &lt;module&gt;SBCShop-Eureka-Client&lt;/module&gt; &lt;/modules&gt;&lt;/project&gt; 创建SBCShop-Eureka-Server模块1、进入SBCShop文件夹1cd SBCShop 2、创建SBCShop-Eureka-Server模块1mvn archetype:generate -DgroupId=com.itaban.app -DartifactId=SBCShop-Eureka-Server -DarchetypeArtifactId=maven-quickstart -DinteractiveMode=false 创建SBCShop-Eureka-Client模块1、创建SBCShop-Eureka-Client模块1mvn archetype:generate -DgroupId=com.itaban.app -DartifactId=SBCShop-Eureka-Client -DarchetypeArtifactId=maven-quickstart -DinteractiveMode=false 修改pom.xml文件1、修改SBCShop文件夹下的pom.xml文件，添加如下内容：1234&lt;modules&gt; &lt;module&gt;SBCShop-Eureka-Server&lt;/module&gt; &lt;module&gt;SBCShop-Eureka-Client&lt;/module&gt;&lt;/modules&gt; 2、修改SBCShop-Eureka-Server文件夹下的pom.xml文件 删除com.itaban.app 删除 1.0-SNAPSHOT 添加jar注：groupId和version会继承SBCShop中的groupId和version，packaging设置打包方式为jar3、修改SBCShop-Eureka-Client文件夹下的pom.xml文件 删除com.itaban.app 删除 1.0-SNAPSHOT 添加jar注：groupId和version会继承SBCShop中的groupId和version，packaging设置打包方式为jar","tags":[{"name":"java","slug":"java","permalink":"itaban.github.io/tags/java/"}]},{"title":"New Legend of Nadame White Snake","date":"2017-04-16T09:31:19.000Z","path":"2017/04/16/New-Legend-of-Nadame-White-Snake/","text":"","tags":[{"name":"其它","slug":"其它","permalink":"itaban.github.io/tags/其它/"}]},{"title":"python开原框架scrapy抓取世纪佳缘MM数据","date":"2017-04-04T09:58:44.000Z","path":"2017/04/04/python-scrapy/","text":"scrapy简介Scrapy，Python开发的一个快速,高层次的屏幕抓取和web抓取框架，用于抓取web站点并从页面中提取结构化的数据。Scrapy用途广泛，可以用于数据挖掘、监测和自动化测试。 Scrapy吸引人的地方在于它是一个框架，任何人都可以根据需求方便的修改。它也提供了多种类型爬虫的基类，如BaseSpider、sitemap爬虫等，最新版本又提供了web2.0爬虫的支持。 scrapy安装安装scrapy前已具备python，pip环境，终端运行：pip install scrapy 初始化项目scrapy startproject jiayuanScrapy 项目目录结构用sublime打开项目结构如下：这些文件主要是： scrapy.cfg: 项目配置文件 jiayuanScrapy/: 项目python模块, 呆会代码将从这里导入 jiayuanScrapy/items.py: 项目items文件 jiayuanScrapy/pipelines.py: 项目管道文件 jiayuanScrapy/settings.py: 项目配置文件 jiayuanScrapy/spiders: 放置spider的目录 定义ItemItems是将要装载抓取的数据的容器，它工作方式像python里面的字典，但它提供更多的保护，比如对未定义的字段填充以防止拼写错误。 它通过创建一个scrapy.item.Item类来声明，定义它的属性为scrpy.item.Field对象，就像是一个对象关系映射(ORM). 我们通过将需要的item模型化，来控制从dmoz.org获得的站点数据，比如我们要获得站点的名字，url和网站描述，我们定义这三种属性的域。要做到这点，我们编辑在tutorial目录下的items.py文件，我们的Item类将会是这样123456789101112131415from scrapy.item import Item, Field class JiayuanItem(Item): name = scrapy.Field() #用户昵称 realUid = scrapy.Field() #用户ID age = scrapy.Field() #用户年龄 education = scrapy.Field() #学历 height = scrapy.Field() #身高 weight = scrapy.Field() #体重 nation = scrapy.Field() #户籍 self_introduction = scrapy.Field() #自我简介 requirement = scrapy.Field() #另一半要求 image = scrapy.Field() #头像 marriage = scrapy.Field() #婚姻状态 work_location = scrapy.Field() #工作省份 work_sublocation = scrapy.Field() #工作区域 我们的第一个爬虫(Spider)要建立一个Spider，你必须为scrapy.spider.BaseSpider创建一个子类，并确定三个主要的、强制的属性： name：爬虫的识别名，它必须是唯一的，在不同的爬虫中你必须定义不同的名字. start_urls：爬虫开始爬的一个URL列表。爬虫从这里开始抓取数据，所以，第一次下载的数据将会从这些URLS开始。其他子URL将会从这些起始URL中继承性生成。 parse()：爬虫的方法，调用时候传入从每一个URL传回的Response对象作为参数，response将会是parse方法的唯一的一个参数,这个方法负责解析返回的数据、匹配抓取的数据(解析为item)并跟踪更多的URL。 在/jiayuanScrapy/spiders/目录下新建文件jiayuanSpider.py 12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061626364656667# -*- coding: utf-8 -*-import jsonimport scrapyfrom scrapy.spider import BaseSpiderimport sysimport osreload(sys)sys.setdefaultencoding('utf-8')from jiayuanScrapy.items import JiayuanscrapyItemclass JiayuanSpider(BaseSpider): name = \"jiayuan\" allowed_domains = [\"search.jiayuan.com\"] start_urls = [] url = 'http://www.jiayuan.com' def start_requests(self): baseUrl = \"http://search.jiayuan.com/v2/search_v2.php?key=&amp;sex=f&amp;stc=23:1&amp;sn=default&amp;sv=1&amp;f=select&amp;listStyle=bigPhoto&amp;pri_uid=0&amp;jsversion=v5&amp;p=\" try: #for page in range(1,46948): for page in range(1,46948): self.start_urls.append(baseUrl+str(page)) print self.start_urls for url in self.start_urls: yield self.make_requests_from_url(url) finally: print \"=\" def parse(self, response): filename = response.url.split(\"/\")[-2] responseString = response.body responseString = responseString.replace('##jiayser##//','') responseString = responseString.replace('##jiayser##','') open(filename, 'wb').write(responseString) jsonObject = json.loads(responseString) pageTotal = jsonObject[u'pageTotal'] users = jsonObject[u'userInfo'] for u in users: item = JiayuanscrapyItem() item['name'] = u['nickname'] item['realUid'] = u['realUid'] item['height'] = u['height'] item['weight'] = u['randListTag'] item['age'] = u['age'] item['education'] = u['education'] item['image'] = u['image'] item['self_introduction'] = u['shortnote'] item['requirement'] = u['matchCondition'] item['marriage'] = u['marriage'] item['work_location'] = u['work_location'] item['work_sublocation'] = u['work_sublocation'] fxly = 'search_v2_index' if 'fxly' in u.keys(): fxly = u['fxly'] # if u.has_key(u'fxly'): # fxly = u['fxly'] # print '----------------------' #print u yield scrapy.Request(self.url+'/'+str(u['realUid'])+'?fxly='+fxly,callback=self.parse_book_list_detail,dont_filter=True,meta=&#123;'item':item&#125;) #这个yield好像和return挺像的，具体我还得看下python的书，那个url是相对的网址，要自己拼凑出来，callback一个回传 def parse_book_list_detail(self,response): #相当于点进去一个网站，处理那个点进去的网站的信息 item = response.meta['item'] #print response.body #summary = response.xpath('//div[@id=\"bigImg\"]/ul/li/table/tr/td/a/img/@src').extract() #print summary #item['kk'] = '\\n'.join(summary) #print '---------------------------------------------' yield item pipelines.py文件内添加如下代码：123456789101112131415161718192021222324252627class JiayuanscrapyPipeline(object): def __init__(self): # 链接数据库 self.client = pymongo.MongoClient(host=settings['MONGO_HOST'], port=settings['MONGO_PORT']) # 数据库登录需要帐号密码的话 # self.client.admin.authenticate(settings['MINGO_USER'], settings['MONGO_PSW']) self.db = self.client[settings['MONGO_DB']] # 获得数据库的句柄 self.coll = self.db[settings['MONGO_COLL']] # 获得collection的句柄 def process_item(self, item, spider): postItem = dict(item) # 把item转化成字典形式 self.coll.insert(postItem) # 向数据库插入一条记录 dir_path = '%s/%s/%s' % (settings['IMAGES_STORE'], spider.name,postItem['name']) if not os.path.exists(dir_path): os.mkdir(dir_path) us = postItem['image'].split('/')[-1] image_file_name = us file_path = '%s/%s' % (dir_path, image_file_name) print file_path with open(file_path, 'wb') as handle: response = requests.get(postItem['image'], stream=True) for block in response.iter_content(1024): if not block: break handle.write(block) return item # 会在控制台输出原item数据，可以选择不写 修改settings.py文件添加以下内容：12345678ITEM_PIPELINES = &#123; &apos;jiayuanScrapy.pipelines.JiayuanscrapyPipeline&apos;: 300,&#125;MONGO_HOST = &quot;127.0.0.1&quot; # 主机IPMONGO_PORT = 27017 # 端口号MONGO_DB = &quot;Spider&quot; # 库名 MONGO_COLL = &quot;jiayuan&quot; # collection名IMAGES_STORE = &apos;.&apos; 爬取数据12cd jiayuanScrapyscrapy crawl jiayuan 爬取结束后可以看到项目根目录下有一个jiayuan文件夹，里面有很多以用户昵称创建的文件夹，存放的是该用户的佳缘头像。 使用robomongo查看mongo存储的数据","tags":[{"name":"python","slug":"python","permalink":"itaban.github.io/tags/python/"}]},{"title":"利用Hexo+github快速搭建博客系统","date":"2017-04-02T14:18:34.000Z","path":"2017/04/02/hexo-blog/","text":"Hexo是什么？ Hexo 是一个简单地、轻量地、基于Node的一个静态博客框架，可以方便的生成静态网页托管在github和Heroku上。快速、简单且功能强大的 Node.js 博客框架。A fast, simple &amp; powerful blog framework, powered by Node.js. GitHub Pages是什么？ GitHub Pages 可以被认为是用户编写的、托管在github上的静态网页。由于它的空间免费稳定， 可以用于介绍托管在github上的Project或者搭建网站。 Hexo安装及项目创建1.Node安装 由于 Hexo 是基于 Node ，安装前要先安装 Node，安装步骤请自行百度。 2.Hexo安装 npm install -g hexo 3.创建项目 hexo init myBlog 4.安装项目依赖 cd myBlog npm install 5.启动项目 hexo server hexo默认使用4000端口，浏览器打开：http：//locahost:4000即可访问。 6.Hexo主题安装 hexo官网提供了很多主题，知乎有一回答主题列表的，地址：https://www.zhihu.com/question/24422335，选择自己喜欢的主题下载，将主题放在 /myBlog/themes文件夹下，修改/myBlog/_config.yml文件内的theme：‘刚刚下载的主题名’。 GitHub项目创建1.GitHub帐号申请 不会的自行百度。 2.GitHub项目创建 建议Repository name 一栏填写：用户名.github.io,可以避免Hexo本地与远程资源引用目录问题。 3.设置GitHub Pages 进入项目，点击Settings即可设置 找到 GitHub Pages，Source选择master 点击save即可。 发布博客GitHub1.设置git身份信息 git config --global user.name &quot;你的用户名&quot; git config --global user.email &quot;你的邮箱&quot; 2.安装hexo git插件 npm install hexo-deployer-git --save 3.配置发布设置 修改/_config.yml文件1234deploy: type: git repo: git@github.com:itaban/itaban.github.io.git branch: master 4.生成部署 hexo d -g #在部署前先生成 5.错误解决 如果出现下面这样的错误：1234Permission denied (publickey).fatal: Could not read from remote repository.Please make sure you have the correct access rightsand the repository exists. 则是因为没有设置好public key所致。 在本机生成public key,不懂的可以参考我的这一篇博客Git ssh 配置及使用 结语 经过上述步骤，一个属于自己的博客系统已经创建完成了!","tags":[{"name":"java","slug":"java","permalink":"itaban.github.io/tags/java/"},{"name":"python","slug":"python","permalink":"itaban.github.io/tags/python/"}]},{"title":"centos7安装mysql server 5.7","date":"2016-02-01T06:29:57.000Z","path":"2016/02/01/installMysqlOnCentos/","text":"1、配置yum源下载源wget wget http://dev.mysql.com/get/mysql57-community-release-el7-8.noarch.rpm 安装源rpm -ivh mysql57-community-release-el7-8.noarch.rpm 2、安装mysql服务yum install mysql-community-server 3、启动服务systemctl start mysqld 4、开机启动systemctl enable mysqldsystemctl daemon-reload 5、修改root密码查看安装的默认密码grep &#39;temporary password&#39; /var/log/mysqld.log 登录mysqlmysql -uroot -p 修改密码ALTER USER &#39;root&#39;@&#39;localhost&#39; IDENTIFIED BY &#39;newpassword&#39; 6、添加远程登录用户GRANT ALL PRIVILEGES ON *.* TO &#39;root&#39;@&#39;%&#39; IDENTIFIED BY &#39;newpassword&#39; WITH GRANT OPTION #7、设置编码 vi /etc/my.cnf添加haracter_set_server=utf8init_connect=&#39;SET NAMES utf8&#39;","tags":[{"name":"database","slug":"database","permalink":"itaban.github.io/tags/database/"}]},{"title":"使用maven命令行创建多模块项目","date":"2016-01-04T09:58:44.000Z","path":"2016/01/04/maven-build-modules-project/","text":"创建父级模块1、命令行运行：1234mvn archetype:generate -DgroupId=com.zmrx -DartifactId=DShop -Dversion=1.0.0-SNAPSHOT -Dpackage=com.zmrx -DarchetypeArtifactId=maven-archetype-site-simple -DarchetypeGroupId=org.apache.maven.archetypes -DinteractiveMode=false 2、项目结构如下图： 创建子模块1、切换目录1cd DShop/ 2、创建项目子模块 系统公共模块|__ 此模块存放整个系统共用的一些方法啊，比如时间处理，分页处理，异常处理等等。 1234mvn archetype:generate -DgroupId=com.zmrx -DartifactId=DShop-Common -Devrsion=1.0.0-SNAPSHOT -Dpackage=com.zmrx -DarchetypeArtifactId=maven-archetype-quickstart -DarchetypeGroupId=org.apache.maven.archetypes -DinteractiveMode=false 项目结构如下图： 系统公共配置模块 |__ 此模块存放整个系统配置文件，比如spring的配置文件，hibernate的配置文件，日志配置文件等等。 1234mvn archetype:generate -DgroupId=com.zmrx -DartifactId=DShop-Common-Config -Devrsion=1.0.0-SNAPSHOT -Dpackage=com.zmrx -DarchetypeArtifactId=maven-archetype-quickstart -DarchetypeGroupId=org.apache.maven.archetypes -DinteractiveMode=false 项目结构如下图： 系统服务模块 |__ 此模块为整个系统的业务逻辑处理模块，存放各种业务代码。1234mvn archetype:generate -DgroupId=com.zmrx -DartifactId=DShop-Service -Devrsion=1.0.0-SNAPSHOT -Dpackage=com.zmrx -DarchetypeArtifactId=maven-archetype-quickstart -DarchetypeGroupId=org.apache.maven.archetypes -DinteractiveMode=false 项目结构如下图： 系统dao模块 |__ 此模块介于服务层与数据层之间。1234mvn archetype:generate -DgroupId=com.zmrx -DartifactId=DShop-Dao -Devrsion=1.0.0-SNAPSHOT -Dpackage=com.zmrx -DarchetypeArtifactId=maven-archetype-quickstart -DarchetypeGroupId=org.apache.maven.archetypes -DinteractiveMode=false 项目结构如下图： 系统domain模块 |__ 此模块存放数据库映射bean。1234mvn archetype:generate -DgroupId=com.zmrx -DartifactId=DShop-Domain -Devrsion=1.0.0-SNAPSHOT -Dpackage=com.zmrx -DarchetypeArtifactId=maven-archetype-quickstart -DarchetypeGroupId=org.apache.maven.archetypes -DinteractiveMode=false 项目结构如下图： 系统web模块 |__ 此模块为web服务模块，提供web服务。1234mvn archetype:generate -DgroupId=com.zmrx -DartifactId=DShop-Web -Devrsion=1.0.0-SNAPSHOT -Dpackage=com.zmrx -DarchetypeArtifactId=maven-archetype-webapp -DarchetypeGroupId=org.apache.maven.archetypes -DinteractiveMode=false 项目结构如下图：","tags":[{"name":"java","slug":"java","permalink":"itaban.github.io/tags/java/"}]}]